import * as fs from "fs";
import * as path from "path";

interface ESLintMessage {
  line?: number;
  column?: number;
  ruleId?: string;
  message: string;
  severity: number;
}

interface ESLintResult {
  filePath: string;
  messages: ESLintMessage[];
}

interface Issue {
  file: string;
  line: number;
  column: number;
  rule: string;
  message: string;
  severity: number;
}

try {
  // Read the ESLint JSON output
  const eslintResults: ESLintResult[] = JSON.parse(
    fs.readFileSync("eslint-results.json", "utf8")
  );

  let markdownContent = "# ESLint Issues Report\n\n";
  markdownContent += `*Generated on: ${new Date().toLocaleString()}*\n\n`;

  const criticalIssues: Issue[] = [];
  const mediumIssues: Issue[] = [];

  // Process each file's results
  eslintResults.forEach((file) => {
    if (file.messages.length > 0) {
      // Skip files in build directories or node_modules
      const relativePath = path.relative(process.cwd(), file.filePath);
      if (
        relativePath.includes(".next/") ||
        relativePath.includes("node_modules/") ||
        relativePath.includes("dist/") ||
        relativePath.includes("build/") ||
        relativePath.includes("coverage/")
      ) {
        return; // Skip build artifacts
      }

      file.messages.forEach((message) => {
        const issue: Issue = {
          file: relativePath,
          line: message.line || 0,
          column: message.column || 0,
          rule: message.ruleId || "unknown",
          message: message.message,
          severity: message.severity,
        };

        if (message.severity === 2) {
          // Error
          criticalIssues.push(issue);
        } else if (message.severity === 1) {
          // Warning
          mediumIssues.push(issue);
        }
      });
    }
  });

  // Generate Critical Issues section
  if (criticalIssues.length > 0) {
    markdownContent += "## üî¥ Critical Issues (Errors)\n\n";
    markdownContent +=
      "*These issues must be fixed as they will cause build failures or runtime errors.*\n\n";
    criticalIssues.forEach((issue) => {
      markdownContent += `- [ ] **${issue.file}:${issue.line}:${issue.column}** - ${issue.message}`;
      if (issue.rule && issue.rule !== "unknown") {
        markdownContent += ` \`(${issue.rule})\``;
      }
      markdownContent += "\n";
    });
    markdownContent += "\n";
  }

  // Generate Medium Issues section
  if (mediumIssues.length > 0) {
    markdownContent += "## üü° Medium Issues (Warnings)\n\n";
    markdownContent +=
      "*These issues should be addressed to improve code quality and maintainability.*\n\n";
    mediumIssues.forEach((issue) => {
      markdownContent += `- [ ] **${issue.file}:${issue.line}:${issue.column}** - ${issue.message}`;
      if (issue.rule && issue.rule !== "unknown") {
        markdownContent += ` \`(${issue.rule})\``;
      }
      markdownContent += "\n";
    });
    markdownContent += "\n";
  }

  // Add summary
  markdownContent += `## üìä Summary\n\n`;
  markdownContent += `- **Critical Issues (Errors)**: ${criticalIssues.length}\n`;
  markdownContent += `- **Medium Issues (Warnings)**: ${mediumIssues.length}\n`;
  markdownContent += `- **Total Issues**: ${
    criticalIssues.length + mediumIssues.length
  }\n\n`;

  if (criticalIssues.length === 0 && mediumIssues.length === 0) {
    markdownContent += "## ‚úÖ Great Job!\n\n";
    markdownContent +=
      "No ESLint issues found! Your code is looking clean. üéâ\n";
  }

  markdownContent += `---\n\n`;

  // Get ESLint version
  try {
    const eslintPackage = JSON.parse(
      fs.readFileSync("node_modules/eslint/package.json", "utf8")
    );
    markdownContent += `*Report generated by ESLint v${eslintPackage.version}*\n`;
  } catch {
    markdownContent += `*Report generated by ESLint*\n`;
  }

  // Write to markdown file
  fs.writeFileSync("work/tasks/eslint-report.md", markdownContent);

  console.log("‚úÖ ESLint report generated: work/tasks/eslint-report.md");
  console.log(
    `üìä Found ${criticalIssues.length} critical issues and ${mediumIssues.length} medium issues`
  );

  // Clean up the JSON file
  fs.unlinkSync("eslint-results.json");
} catch (error) {
  if (error instanceof Error) {
    if ((error as any).code === "ENOENT") {
      console.error(
        "‚ùå Error: eslint-results.json file not found. Make sure ESLint ran successfully."
      );
    } else {
      console.error("‚ùå Error processing ESLint results:", error.message);
    }
  } else {
    console.error("‚ùå Unknown error processing ESLint results");
  }
  process.exit(1);
}
